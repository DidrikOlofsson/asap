rule WhippetIndex:
    input:
        annotation = ANNOTATION,
        genome = GENOME
    output:
        path.join(WHIPPET_DIR, "index", "index.jls")
    threads:
        4
    params:
        partition = "main",
        nodes = "1",
        ntasks = "4",
        time = "02:00:00",
        mem = "8G",
        mail_user = EMAIL,
        mail_type = EMAIL_TYPE
    log:
        path.join(LOG_DIR, "whippet_index", "whippet_index.log")
    script:
        "scripts/whippet_index.py"

rule WhippetQuant:
    input:
        idx = WHIPPET_IDX,
        reads = get_reads
    output:
        quant = path.join(WHIPPET_DIR, "quant", "{sample}", "{sample}.psi.gz"),
        sam = path.join(WHIPPET_DIR, "quant", "{sample}", "{sample}.out.sam")
    threads:
        4
    params:
        partition = "main",
        nodes = "1",
        ntasks = "4",
        time = "02:00:00",
        mem = "8G",
        mail_user = EMAIL,
        mail_type = EMAIL_TYPE
    log:
        path.join(LOG_DIR, "whippet_quant", "{sample}.log")
    script:
        "scripts/whippet_quant.py"

rule ConvertSam:
    input:
        rules.WhippetQuant.output.sam
    output:
        path.join(WHIPPET_DIR, "quant", "{sample}", "{sample}.out.bam")
    threads:
        6
    params:
        partition = "main",
        nodes = "1",
        ntasks = "6",
        time = "02:00:00",
        mem = "8G",
        mail_user = EMAIL,
        mail_type = EMAIL_TYPE
    log:
        path.join(LOG_DIR, "whippet", "convert_sam", "{sample}.log")
    conda:
        "envs/samtools.yml"
    shell:
        '''
        samtools view -b -o {output} -@ {params.ntasks} {input}
        '''

rule SortBam:
    input:
        rules.ConvertSam.output
    output:
        path.join(WHIPPET_DIR, "quant", "{sample}", "{sample}.sorted.bam")
    threads:
        6
    params:
        partition = "main",
        nodes = "1",
        ntasks = "6",
        time = "02:00:00",
        mem = "12G",
        mail_user = EMAIL,
        mail_type = EMAIL_TYPE
    log:
        path.join(LOG_DIR, "whippet", "sort_bam", "{sample}.log")
    conda:
        "envs/samtools.yml"
    shell:
        '''
        samtools sort -m 2G -o {output} -@ {params.ntasks} {input}
        rm {input}
        '''

rule WhippetIndexBam:
    input:
        rules.SortBam.output
    output:
        path.join(WHIPPET_DIR, "quant", "{sample}", "{sample}.sorted.bam.bai")
    threads:
        4
    params:
        partition = "main",
        nodes = "1",
        ntasks = "4",
        time = "02:00:00",
        mem = "12G",
        mail_user = EMAIL,
        mail_type = EMAIL_TYPE
    log:
        path.join(LOG_DIR, "whippet", "index_bam", "{sample}.log")
    conda:
        "envs/samtools.yml"
    shell:
        '''
        samtools index -@ {params.ntasks} {input}
        '''

rule WhippetDelta:
    input:
        expand(
            path.join(
                WHIPPET_DIR,
                "quant",
                "{sample}",
                "{sample}.sorted.bam.bai"
            ), sample=SAMPLES
        )
    output:
        path.join(WHIPPET_DIR, "delta", "{comparison}", "{comparison}.diff.gz")
    threads:
        4
    params:
        quant_subsets = deltaInput,
        output_path = path.join(
            WHIPPET_DIR, "delta", "{comparison}", "{comparison}"
        ),
        min_cov = config["parameters"]["whippet"]["min_cov"],
        min_sam = config["parameters"]["whippet"]["min_sam"],
        partition = "main",
        nodes = "1",
        ntasks = "4",
        time = "01:00:00",
        mem = "8G",
        mail_user = EMAIL,
        mail_type = EMAIL_TYPE
    log:
        path.join(LOG_DIR, "whippet_delta", "{comparison}.log")
    script:
        "scripts/whippet_delta.py"

# quants = expand(
#     path.join(WHIPPET_DIR, "quant", "{sample}", "{sample}.psi.gz"),
#     sample=SAMPLES
# )
